|Ram512
clock => Ram64:ram0.clock
clock => Ram64:ram1.clock
clock => Ram64:ram2.clock
clock => Ram64:ram3.clock
clock => Ram64:ram4.clock
clock => Ram64:ram5.clock
clock => Ram64:ram6.clock
clock => Ram64:ram7.clock
input[0] => Ram64:ram0.input[0]
input[0] => Ram64:ram1.input[0]
input[0] => Ram64:ram2.input[0]
input[0] => Ram64:ram3.input[0]
input[0] => Ram64:ram4.input[0]
input[0] => Ram64:ram5.input[0]
input[0] => Ram64:ram6.input[0]
input[0] => Ram64:ram7.input[0]
input[1] => Ram64:ram0.input[1]
input[1] => Ram64:ram1.input[1]
input[1] => Ram64:ram2.input[1]
input[1] => Ram64:ram3.input[1]
input[1] => Ram64:ram4.input[1]
input[1] => Ram64:ram5.input[1]
input[1] => Ram64:ram6.input[1]
input[1] => Ram64:ram7.input[1]
input[2] => Ram64:ram0.input[2]
input[2] => Ram64:ram1.input[2]
input[2] => Ram64:ram2.input[2]
input[2] => Ram64:ram3.input[2]
input[2] => Ram64:ram4.input[2]
input[2] => Ram64:ram5.input[2]
input[2] => Ram64:ram6.input[2]
input[2] => Ram64:ram7.input[2]
input[3] => Ram64:ram0.input[3]
input[3] => Ram64:ram1.input[3]
input[3] => Ram64:ram2.input[3]
input[3] => Ram64:ram3.input[3]
input[3] => Ram64:ram4.input[3]
input[3] => Ram64:ram5.input[3]
input[3] => Ram64:ram6.input[3]
input[3] => Ram64:ram7.input[3]
input[4] => Ram64:ram0.input[4]
input[4] => Ram64:ram1.input[4]
input[4] => Ram64:ram2.input[4]
input[4] => Ram64:ram3.input[4]
input[4] => Ram64:ram4.input[4]
input[4] => Ram64:ram5.input[4]
input[4] => Ram64:ram6.input[4]
input[4] => Ram64:ram7.input[4]
input[5] => Ram64:ram0.input[5]
input[5] => Ram64:ram1.input[5]
input[5] => Ram64:ram2.input[5]
input[5] => Ram64:ram3.input[5]
input[5] => Ram64:ram4.input[5]
input[5] => Ram64:ram5.input[5]
input[5] => Ram64:ram6.input[5]
input[5] => Ram64:ram7.input[5]
input[6] => Ram64:ram0.input[6]
input[6] => Ram64:ram1.input[6]
input[6] => Ram64:ram2.input[6]
input[6] => Ram64:ram3.input[6]
input[6] => Ram64:ram4.input[6]
input[6] => Ram64:ram5.input[6]
input[6] => Ram64:ram6.input[6]
input[6] => Ram64:ram7.input[6]
input[7] => Ram64:ram0.input[7]
input[7] => Ram64:ram1.input[7]
input[7] => Ram64:ram2.input[7]
input[7] => Ram64:ram3.input[7]
input[7] => Ram64:ram4.input[7]
input[7] => Ram64:ram5.input[7]
input[7] => Ram64:ram6.input[7]
input[7] => Ram64:ram7.input[7]
input[8] => Ram64:ram0.input[8]
input[8] => Ram64:ram1.input[8]
input[8] => Ram64:ram2.input[8]
input[8] => Ram64:ram3.input[8]
input[8] => Ram64:ram4.input[8]
input[8] => Ram64:ram5.input[8]
input[8] => Ram64:ram6.input[8]
input[8] => Ram64:ram7.input[8]
input[9] => Ram64:ram0.input[9]
input[9] => Ram64:ram1.input[9]
input[9] => Ram64:ram2.input[9]
input[9] => Ram64:ram3.input[9]
input[9] => Ram64:ram4.input[9]
input[9] => Ram64:ram5.input[9]
input[9] => Ram64:ram6.input[9]
input[9] => Ram64:ram7.input[9]
input[10] => Ram64:ram0.input[10]
input[10] => Ram64:ram1.input[10]
input[10] => Ram64:ram2.input[10]
input[10] => Ram64:ram3.input[10]
input[10] => Ram64:ram4.input[10]
input[10] => Ram64:ram5.input[10]
input[10] => Ram64:ram6.input[10]
input[10] => Ram64:ram7.input[10]
input[11] => Ram64:ram0.input[11]
input[11] => Ram64:ram1.input[11]
input[11] => Ram64:ram2.input[11]
input[11] => Ram64:ram3.input[11]
input[11] => Ram64:ram4.input[11]
input[11] => Ram64:ram5.input[11]
input[11] => Ram64:ram6.input[11]
input[11] => Ram64:ram7.input[11]
input[12] => Ram64:ram0.input[12]
input[12] => Ram64:ram1.input[12]
input[12] => Ram64:ram2.input[12]
input[12] => Ram64:ram3.input[12]
input[12] => Ram64:ram4.input[12]
input[12] => Ram64:ram5.input[12]
input[12] => Ram64:ram6.input[12]
input[12] => Ram64:ram7.input[12]
input[13] => Ram64:ram0.input[13]
input[13] => Ram64:ram1.input[13]
input[13] => Ram64:ram2.input[13]
input[13] => Ram64:ram3.input[13]
input[13] => Ram64:ram4.input[13]
input[13] => Ram64:ram5.input[13]
input[13] => Ram64:ram6.input[13]
input[13] => Ram64:ram7.input[13]
input[14] => Ram64:ram0.input[14]
input[14] => Ram64:ram1.input[14]
input[14] => Ram64:ram2.input[14]
input[14] => Ram64:ram3.input[14]
input[14] => Ram64:ram4.input[14]
input[14] => Ram64:ram5.input[14]
input[14] => Ram64:ram6.input[14]
input[14] => Ram64:ram7.input[14]
input[15] => Ram64:ram0.input[15]
input[15] => Ram64:ram1.input[15]
input[15] => Ram64:ram2.input[15]
input[15] => Ram64:ram3.input[15]
input[15] => Ram64:ram4.input[15]
input[15] => Ram64:ram5.input[15]
input[15] => Ram64:ram6.input[15]
input[15] => Ram64:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram64:ram0.address[0]
address[0] => Ram64:ram1.address[0]
address[0] => Ram64:ram2.address[0]
address[0] => Ram64:ram3.address[0]
address[0] => Ram64:ram4.address[0]
address[0] => Ram64:ram5.address[0]
address[0] => Ram64:ram6.address[0]
address[0] => Ram64:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram64:ram0.address[1]
address[1] => Ram64:ram1.address[1]
address[1] => Ram64:ram2.address[1]
address[1] => Ram64:ram3.address[1]
address[1] => Ram64:ram4.address[1]
address[1] => Ram64:ram5.address[1]
address[1] => Ram64:ram6.address[1]
address[1] => Ram64:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram64:ram0.address[2]
address[2] => Ram64:ram1.address[2]
address[2] => Ram64:ram2.address[2]
address[2] => Ram64:ram3.address[2]
address[2] => Ram64:ram4.address[2]
address[2] => Ram64:ram5.address[2]
address[2] => Ram64:ram6.address[2]
address[2] => Ram64:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => Ram64:ram0.address[3]
address[3] => Ram64:ram1.address[3]
address[3] => Ram64:ram2.address[3]
address[3] => Ram64:ram3.address[3]
address[3] => Ram64:ram4.address[3]
address[3] => Ram64:ram5.address[3]
address[3] => Ram64:ram6.address[3]
address[3] => Ram64:ram7.address[3]
address[4] => Ram64:ram0.address[4]
address[4] => Ram64:ram1.address[4]
address[4] => Ram64:ram2.address[4]
address[4] => Ram64:ram3.address[4]
address[4] => Ram64:ram4.address[4]
address[4] => Ram64:ram5.address[4]
address[4] => Ram64:ram6.address[4]
address[4] => Ram64:ram7.address[4]
address[5] => Ram64:ram0.address[5]
address[5] => Ram64:ram1.address[5]
address[5] => Ram64:ram2.address[5]
address[5] => Ram64:ram3.address[5]
address[5] => Ram64:ram4.address[5]
address[5] => Ram64:ram5.address[5]
address[5] => Ram64:ram6.address[5]
address[5] => Ram64:ram7.address[5]
address[6] => ~NO_FANOUT~
address[7] => ~NO_FANOUT~
address[8] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram0|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram1|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram2|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram3|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram4|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram5|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram6|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7
clock => Ram8:ram0.clock
clock => Ram8:ram1.clock
clock => Ram8:ram2.clock
clock => Ram8:ram3.clock
clock => Ram8:ram4.clock
clock => Ram8:ram5.clock
clock => Ram8:ram6.clock
clock => Ram8:ram7.clock
input[0] => Ram8:ram0.input[0]
input[0] => Ram8:ram1.input[0]
input[0] => Ram8:ram2.input[0]
input[0] => Ram8:ram3.input[0]
input[0] => Ram8:ram4.input[0]
input[0] => Ram8:ram5.input[0]
input[0] => Ram8:ram6.input[0]
input[0] => Ram8:ram7.input[0]
input[1] => Ram8:ram0.input[1]
input[1] => Ram8:ram1.input[1]
input[1] => Ram8:ram2.input[1]
input[1] => Ram8:ram3.input[1]
input[1] => Ram8:ram4.input[1]
input[1] => Ram8:ram5.input[1]
input[1] => Ram8:ram6.input[1]
input[1] => Ram8:ram7.input[1]
input[2] => Ram8:ram0.input[2]
input[2] => Ram8:ram1.input[2]
input[2] => Ram8:ram2.input[2]
input[2] => Ram8:ram3.input[2]
input[2] => Ram8:ram4.input[2]
input[2] => Ram8:ram5.input[2]
input[2] => Ram8:ram6.input[2]
input[2] => Ram8:ram7.input[2]
input[3] => Ram8:ram0.input[3]
input[3] => Ram8:ram1.input[3]
input[3] => Ram8:ram2.input[3]
input[3] => Ram8:ram3.input[3]
input[3] => Ram8:ram4.input[3]
input[3] => Ram8:ram5.input[3]
input[3] => Ram8:ram6.input[3]
input[3] => Ram8:ram7.input[3]
input[4] => Ram8:ram0.input[4]
input[4] => Ram8:ram1.input[4]
input[4] => Ram8:ram2.input[4]
input[4] => Ram8:ram3.input[4]
input[4] => Ram8:ram4.input[4]
input[4] => Ram8:ram5.input[4]
input[4] => Ram8:ram6.input[4]
input[4] => Ram8:ram7.input[4]
input[5] => Ram8:ram0.input[5]
input[5] => Ram8:ram1.input[5]
input[5] => Ram8:ram2.input[5]
input[5] => Ram8:ram3.input[5]
input[5] => Ram8:ram4.input[5]
input[5] => Ram8:ram5.input[5]
input[5] => Ram8:ram6.input[5]
input[5] => Ram8:ram7.input[5]
input[6] => Ram8:ram0.input[6]
input[6] => Ram8:ram1.input[6]
input[6] => Ram8:ram2.input[6]
input[6] => Ram8:ram3.input[6]
input[6] => Ram8:ram4.input[6]
input[6] => Ram8:ram5.input[6]
input[6] => Ram8:ram6.input[6]
input[6] => Ram8:ram7.input[6]
input[7] => Ram8:ram0.input[7]
input[7] => Ram8:ram1.input[7]
input[7] => Ram8:ram2.input[7]
input[7] => Ram8:ram3.input[7]
input[7] => Ram8:ram4.input[7]
input[7] => Ram8:ram5.input[7]
input[7] => Ram8:ram6.input[7]
input[7] => Ram8:ram7.input[7]
input[8] => Ram8:ram0.input[8]
input[8] => Ram8:ram1.input[8]
input[8] => Ram8:ram2.input[8]
input[8] => Ram8:ram3.input[8]
input[8] => Ram8:ram4.input[8]
input[8] => Ram8:ram5.input[8]
input[8] => Ram8:ram6.input[8]
input[8] => Ram8:ram7.input[8]
input[9] => Ram8:ram0.input[9]
input[9] => Ram8:ram1.input[9]
input[9] => Ram8:ram2.input[9]
input[9] => Ram8:ram3.input[9]
input[9] => Ram8:ram4.input[9]
input[9] => Ram8:ram5.input[9]
input[9] => Ram8:ram6.input[9]
input[9] => Ram8:ram7.input[9]
input[10] => Ram8:ram0.input[10]
input[10] => Ram8:ram1.input[10]
input[10] => Ram8:ram2.input[10]
input[10] => Ram8:ram3.input[10]
input[10] => Ram8:ram4.input[10]
input[10] => Ram8:ram5.input[10]
input[10] => Ram8:ram6.input[10]
input[10] => Ram8:ram7.input[10]
input[11] => Ram8:ram0.input[11]
input[11] => Ram8:ram1.input[11]
input[11] => Ram8:ram2.input[11]
input[11] => Ram8:ram3.input[11]
input[11] => Ram8:ram4.input[11]
input[11] => Ram8:ram5.input[11]
input[11] => Ram8:ram6.input[11]
input[11] => Ram8:ram7.input[11]
input[12] => Ram8:ram0.input[12]
input[12] => Ram8:ram1.input[12]
input[12] => Ram8:ram2.input[12]
input[12] => Ram8:ram3.input[12]
input[12] => Ram8:ram4.input[12]
input[12] => Ram8:ram5.input[12]
input[12] => Ram8:ram6.input[12]
input[12] => Ram8:ram7.input[12]
input[13] => Ram8:ram0.input[13]
input[13] => Ram8:ram1.input[13]
input[13] => Ram8:ram2.input[13]
input[13] => Ram8:ram3.input[13]
input[13] => Ram8:ram4.input[13]
input[13] => Ram8:ram5.input[13]
input[13] => Ram8:ram6.input[13]
input[13] => Ram8:ram7.input[13]
input[14] => Ram8:ram0.input[14]
input[14] => Ram8:ram1.input[14]
input[14] => Ram8:ram2.input[14]
input[14] => Ram8:ram3.input[14]
input[14] => Ram8:ram4.input[14]
input[14] => Ram8:ram5.input[14]
input[14] => Ram8:ram6.input[14]
input[14] => Ram8:ram7.input[14]
input[15] => Ram8:ram0.input[15]
input[15] => Ram8:ram1.input[15]
input[15] => Ram8:ram2.input[15]
input[15] => Ram8:ram3.input[15]
input[15] => Ram8:ram4.input[15]
input[15] => Ram8:ram5.input[15]
input[15] => Ram8:ram6.input[15]
input[15] => Ram8:ram7.input[15]
load => DMux8Way:DMux.a
address[0] => DMux8Way:DMux.sel[0]
address[0] => Ram8:ram0.address[0]
address[0] => Ram8:ram1.address[0]
address[0] => Ram8:ram2.address[0]
address[0] => Ram8:ram3.address[0]
address[0] => Ram8:ram4.address[0]
address[0] => Ram8:ram5.address[0]
address[0] => Ram8:ram6.address[0]
address[0] => Ram8:ram7.address[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Ram8:ram0.address[1]
address[1] => Ram8:ram1.address[1]
address[1] => Ram8:ram2.address[1]
address[1] => Ram8:ram3.address[1]
address[1] => Ram8:ram4.address[1]
address[1] => Ram8:ram5.address[1]
address[1] => Ram8:ram6.address[1]
address[1] => Ram8:ram7.address[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Ram8:ram0.address[2]
address[2] => Ram8:ram1.address[2]
address[2] => Ram8:ram2.address[2]
address[2] => Ram8:ram3.address[2]
address[2] => Ram8:ram4.address[2]
address[2] => Ram8:ram5.address[2]
address[2] => Ram8:ram6.address[2]
address[2] => Ram8:ram7.address[2]
address[2] => Mux8Way16:Mux.sel[2]
address[3] => ~NO_FANOUT~
address[4] => ~NO_FANOUT~
address[5] => ~NO_FANOUT~
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram0|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram0|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram1|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram1|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram2|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram2|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram3|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram3|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram4|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram4|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram5|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram5|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram6|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram6|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7
clock => Register16:Reg16.clock
input[0] => Register16:Reg16.input[0]
input[1] => Register16:Reg16.input[1]
input[2] => Register16:Reg16.input[2]
input[3] => Register16:Reg16.input[3]
input[4] => Register16:Reg16.input[4]
input[5] => Register16:Reg16.input[5]
input[6] => Register16:Reg16.input[6]
input[7] => Register16:Reg16.input[7]
input[8] => Register16:Reg16.input[8]
input[9] => Register16:Reg16.input[9]
input[10] => Register16:Reg16.input[10]
input[11] => Register16:Reg16.input[11]
input[12] => Register16:Reg16.input[12]
input[13] => Register16:Reg16.input[13]
input[14] => Register16:Reg16.input[14]
input[15] => Register16:Reg16.input[15]
load => DMux8Way:DMux.a
load => Register16:Reg16.load
address[0] => DMux8Way:DMux.sel[0]
address[0] => Mux8Way16:Mux.sel[0]
address[1] => DMux8Way:DMux.sel[1]
address[1] => Mux8Way16:Mux.sel[1]
address[2] => DMux8Way:DMux.sel[2]
address[2] => Mux8Way16:Mux.sel[2]
output[0] <= Mux8Way16:Mux.q[0]
output[1] <= Mux8Way16:Mux.q[1]
output[2] <= Mux8Way16:Mux.q[2]
output[3] <= Mux8Way16:Mux.q[3]
output[4] <= Mux8Way16:Mux.q[4]
output[5] <= Mux8Way16:Mux.q[5]
output[6] <= Mux8Way16:Mux.q[6]
output[7] <= Mux8Way16:Mux.q[7]
output[8] <= Mux8Way16:Mux.q[8]
output[9] <= Mux8Way16:Mux.q[9]
output[10] <= Mux8Way16:Mux.q[10]
output[11] <= Mux8Way16:Mux.q[11]
output[12] <= Mux8Way16:Mux.q[12]
output[13] <= Mux8Way16:Mux.q[13]
output[14] <= Mux8Way16:Mux.q[14]
output[15] <= Mux8Way16:Mux.q[15]


|Ram512|Ram64:ram7|Ram8:ram7|DMux8Way:DMux
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16
clock => Register8:Register1.clock
clock => Register8:Register2.clock
input[0] => Register8:Register1.input[0]
input[1] => Register8:Register1.input[1]
input[2] => Register8:Register1.input[2]
input[3] => Register8:Register1.input[3]
input[4] => Register8:Register1.input[4]
input[5] => Register8:Register1.input[5]
input[6] => Register8:Register1.input[6]
input[7] => Register8:Register1.input[7]
input[8] => Register8:Register2.input[0]
input[9] => Register8:Register2.input[1]
input[10] => Register8:Register2.input[2]
input[11] => Register8:Register2.input[3]
input[12] => Register8:Register2.input[4]
input[13] => Register8:Register2.input[5]
input[14] => Register8:Register2.input[6]
input[15] => Register8:Register2.input[7]
load => Register8:Register1.load
load => Register8:Register2.load
output[0] <= Register8:Register1.output[0]
output[1] <= Register8:Register1.output[1]
output[2] <= Register8:Register1.output[2]
output[3] <= Register8:Register1.output[3]
output[4] <= Register8:Register1.output[4]
output[5] <= Register8:Register1.output[5]
output[6] <= Register8:Register1.output[6]
output[7] <= Register8:Register1.output[7]
output[8] <= Register8:Register2.output[0]
output[9] <= Register8:Register2.output[1]
output[10] <= Register8:Register2.output[2]
output[11] <= Register8:Register2.output[3]
output[12] <= Register8:Register2.output[4]
output[13] <= Register8:Register2.output[5]
output[14] <= Register8:Register2.output[6]
output[15] <= Register8:Register2.output[7]


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register1|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2
clock => BinaryDigit:out1.clock
clock => BinaryDigit:out2.clock
clock => BinaryDigit:out3.clock
clock => BinaryDigit:out4.clock
clock => BinaryDigit:out5.clock
clock => BinaryDigit:out6.clock
clock => BinaryDigit:out7.clock
clock => BinaryDigit:out8.clock
input[0] => BinaryDigit:out1.input
input[1] => BinaryDigit:out2.input
input[2] => BinaryDigit:out3.input
input[3] => BinaryDigit:out4.input
input[4] => BinaryDigit:out5.input
input[5] => BinaryDigit:out6.input
input[6] => BinaryDigit:out7.input
input[7] => BinaryDigit:out8.input
load => BinaryDigit:out1.load
load => BinaryDigit:out2.load
load => BinaryDigit:out3.load
load => BinaryDigit:out4.load
load => BinaryDigit:out5.load
load => BinaryDigit:out6.load
load => BinaryDigit:out7.load
load => BinaryDigit:out8.load
output[0] <= BinaryDigit:out1.output
output[1] <= BinaryDigit:out2.output
output[2] <= BinaryDigit:out3.output
output[3] <= BinaryDigit:out4.output
output[4] <= BinaryDigit:out5.output
output[5] <= BinaryDigit:out6.output
output[6] <= BinaryDigit:out7.output
output[7] <= BinaryDigit:out8.output


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out1|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out2|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out3|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out4|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out5|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out6|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out7|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8
clock => FlipFlopD:ffd.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:ffd.q


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Register16:Reg16|Register8:Register2|BinaryDigit:out8|FlipFlopD:ffd
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Ram8:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Ram64:ram7|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


|Ram512|Mux8Way16:Mux
a[0] => Mux15.IN0
a[1] => Mux14.IN0
a[2] => Mux13.IN0
a[3] => Mux12.IN0
a[4] => Mux11.IN0
a[5] => Mux10.IN0
a[6] => Mux9.IN0
a[7] => Mux8.IN0
a[8] => Mux7.IN0
a[9] => Mux6.IN0
a[10] => Mux5.IN0
a[11] => Mux4.IN0
a[12] => Mux3.IN0
a[13] => Mux2.IN0
a[14] => Mux1.IN0
a[15] => Mux0.IN0
b[0] => Mux15.IN1
b[1] => Mux14.IN1
b[2] => Mux13.IN1
b[3] => Mux12.IN1
b[4] => Mux11.IN1
b[5] => Mux10.IN1
b[6] => Mux9.IN1
b[7] => Mux8.IN1
b[8] => Mux7.IN1
b[9] => Mux6.IN1
b[10] => Mux5.IN1
b[11] => Mux4.IN1
b[12] => Mux3.IN1
b[13] => Mux2.IN1
b[14] => Mux1.IN1
b[15] => Mux0.IN1
c[0] => Mux15.IN2
c[1] => Mux14.IN2
c[2] => Mux13.IN2
c[3] => Mux12.IN2
c[4] => Mux11.IN2
c[5] => Mux10.IN2
c[6] => Mux9.IN2
c[7] => Mux8.IN2
c[8] => Mux7.IN2
c[9] => Mux6.IN2
c[10] => Mux5.IN2
c[11] => Mux4.IN2
c[12] => Mux3.IN2
c[13] => Mux2.IN2
c[14] => Mux1.IN2
c[15] => Mux0.IN2
d[0] => Mux15.IN3
d[1] => Mux14.IN3
d[2] => Mux13.IN3
d[3] => Mux12.IN3
d[4] => Mux11.IN3
d[5] => Mux10.IN3
d[6] => Mux9.IN3
d[7] => Mux8.IN3
d[8] => Mux7.IN3
d[9] => Mux6.IN3
d[10] => Mux5.IN3
d[11] => Mux4.IN3
d[12] => Mux3.IN3
d[13] => Mux2.IN3
d[14] => Mux1.IN3
d[15] => Mux0.IN3
e[0] => Mux15.IN4
e[1] => Mux14.IN4
e[2] => Mux13.IN4
e[3] => Mux12.IN4
e[4] => Mux11.IN4
e[5] => Mux10.IN4
e[6] => Mux9.IN4
e[7] => Mux8.IN4
e[8] => Mux7.IN4
e[9] => Mux6.IN4
e[10] => Mux5.IN4
e[11] => Mux4.IN4
e[12] => Mux3.IN4
e[13] => Mux2.IN4
e[14] => Mux1.IN4
e[15] => Mux0.IN4
f[0] => Mux15.IN5
f[1] => Mux14.IN5
f[2] => Mux13.IN5
f[3] => Mux12.IN5
f[4] => Mux11.IN5
f[5] => Mux10.IN5
f[6] => Mux9.IN5
f[7] => Mux8.IN5
f[8] => Mux7.IN5
f[9] => Mux6.IN5
f[10] => Mux5.IN5
f[11] => Mux4.IN5
f[12] => Mux3.IN5
f[13] => Mux2.IN5
f[14] => Mux1.IN5
f[15] => Mux0.IN5
g[0] => Mux15.IN6
g[1] => Mux14.IN6
g[2] => Mux13.IN6
g[3] => Mux12.IN6
g[4] => Mux11.IN6
g[5] => Mux10.IN6
g[6] => Mux9.IN6
g[7] => Mux8.IN6
g[8] => Mux7.IN6
g[9] => Mux6.IN6
g[10] => Mux5.IN6
g[11] => Mux4.IN6
g[12] => Mux3.IN6
g[13] => Mux2.IN6
g[14] => Mux1.IN6
g[15] => Mux0.IN6
h[0] => Mux15.IN7
h[1] => Mux14.IN7
h[2] => Mux13.IN7
h[3] => Mux12.IN7
h[4] => Mux11.IN7
h[5] => Mux10.IN7
h[6] => Mux9.IN7
h[7] => Mux8.IN7
h[8] => Mux7.IN7
h[9] => Mux6.IN7
h[10] => Mux5.IN7
h[11] => Mux4.IN7
h[12] => Mux3.IN7
h[13] => Mux2.IN7
h[14] => Mux1.IN7
h[15] => Mux0.IN7
sel[0] => Mux0.IN10
sel[0] => Mux1.IN10
sel[0] => Mux2.IN10
sel[0] => Mux3.IN10
sel[0] => Mux4.IN10
sel[0] => Mux5.IN10
sel[0] => Mux6.IN10
sel[0] => Mux7.IN10
sel[0] => Mux8.IN10
sel[0] => Mux9.IN10
sel[0] => Mux10.IN10
sel[0] => Mux11.IN10
sel[0] => Mux12.IN10
sel[0] => Mux13.IN10
sel[0] => Mux14.IN10
sel[0] => Mux15.IN10
sel[1] => Mux0.IN9
sel[1] => Mux1.IN9
sel[1] => Mux2.IN9
sel[1] => Mux3.IN9
sel[1] => Mux4.IN9
sel[1] => Mux5.IN9
sel[1] => Mux6.IN9
sel[1] => Mux7.IN9
sel[1] => Mux8.IN9
sel[1] => Mux9.IN9
sel[1] => Mux10.IN9
sel[1] => Mux11.IN9
sel[1] => Mux12.IN9
sel[1] => Mux13.IN9
sel[1] => Mux14.IN9
sel[1] => Mux15.IN9
sel[2] => Mux0.IN8
sel[2] => Mux1.IN8
sel[2] => Mux2.IN8
sel[2] => Mux3.IN8
sel[2] => Mux4.IN8
sel[2] => Mux5.IN8
sel[2] => Mux6.IN8
sel[2] => Mux7.IN8
sel[2] => Mux8.IN8
sel[2] => Mux9.IN8
sel[2] => Mux10.IN8
sel[2] => Mux11.IN8
sel[2] => Mux12.IN8
sel[2] => Mux13.IN8
sel[2] => Mux14.IN8
sel[2] => Mux15.IN8
q[0] <= Mux15.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= Mux14.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= Mux13.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= Mux12.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= Mux11.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= Mux10.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= Mux9.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= Mux8.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE


